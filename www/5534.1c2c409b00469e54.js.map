{"version":3,"file":"5534.1c2c409b00469e54.js","mappings":"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","names":["Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","watchers","component","componentProps","RouteRedirect","ionRouteRedirectChanged","propDidChange","from","to","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","filter","s","join","writeSegments","history","root","useHash","direction","state","queryString","undefined","generateUrl","parsePath","pushState","replaceState","path","qsStart","indexOf","substring","split","map","trim","writeNavState","chain","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","readNavState","ids","node","getRouteId","push","OUTLET_SELECTOR","matches","querySelector","findRouteRedirect","redirects","find","redirect","i","expected","matchesRedirect","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesSegments","inputSegments","RouterSegments","allparams","matchesDefault","chainSegments","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","findChainForSegments","chains","match","bestScore","matchedChain","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","lastState","componentWillLoad","document","body","window","addEventListener","once","canProceed","_this","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","_this2","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","_this3","_a","startsWith","currentPath","_this4","URL","pathname","search","parsedPath","waitPromise","printDebug","routes","group","forEach","r","debug","groupEnd","printRoutes","_this5","printRedirects","navChanged","_this6","warn","maxMatches","findChainForIDs","param","chainToSegments","safeWriteNavState","win","title","location","href","_this7","redirectFrom","toSegments","unlock","_this8","lock","p","_this9","_this10","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","_this11","routeEvent","routeChangeEvent","loc","prefix","hash","removePrefix","readSegments","redirectFromSegments","redirectedFrom","getElement","RouterLink","routerDirection","onClick","openURL","routerAnimation","render","mode","getIonMode","attrs","rel","target","h","Host","class","createColorClasses","color","t","style","routerLinkCss","hostContext","selector","closest","cssClassMap","getClassMap","classes","getClassList","isArray","c","SCHEME","test","router","preventDefault"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js","./node_modules/@ionic/core/dist/esm/theme-7670341c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-8e692445.js';\nimport { c as componentOnReady, q as debounce } from './helpers-3b390e48.js';\nimport { b as getIonMode } from './ionic-global-c95cf239.js';\nimport { o as openURL, c as createColorClasses } from './theme-7670341c.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n  const path = segments.filter((s) => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      }\n      else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path\n      .split('/')\n      .map((s) => s.trim())\n      .filter((s) => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach((r) => segments.push(...r.segments));\n    const ids = chain.map((r) => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise((resolve) => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while ((outlet = searchNavNode(node))) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n  return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map((key) => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave,\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return ({\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n      });\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map((el) => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n    .map((el) => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el),\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [\n    ...chain,\n    {\n      id: node.id,\n      segments: node.segments,\n      params: node.params,\n      beforeLeave: node.beforeLeave,\n      beforeEnter: node.beforeEnter,\n    },\n  ];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, (processNextHandler) => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(path, direction = 'forward', animation) {\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments: toSegments, queryString } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise((r) => (resolve = r));\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards(to = this.getSegments(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target,\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true,\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}