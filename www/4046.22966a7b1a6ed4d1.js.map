{"version":3,"file":"4046.22966a7b1a6ed4d1.js","mappings":"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","names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","FilesystemWeb","WebPlugin","constructor","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","initDb","undefined","_this","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","static","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","_this2","indexOf","then","conn","req","transaction","objectStore","dbIndexRequest","indexName","_this3","index","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","_this4","readFile","options","_this5","entry","Error","data","content","writeFile","_this6","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","_this7","btoa","atob","deleteFile","_this8","IDBKeyRange","only","_this9","depth","match","parentEntry","rmdir","fullPath","_this10","readDirResult","readdir","files","entryPath","name","stat","_this11","entries","all","map","e","subEntry","substring","getUri","_this12","_this13","rename","_this14","_copy","copy","_this15","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","_this16","toPath","isPathParent","parent","children","pathsA","pathsB","every","value","toObj","toPathComponents","fromObj","updateTime","file","writeResult","contents","filename","str","err","_debug"],"sourceRoot":"webpack:///","sources":["./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"x_google_ignoreList":[0]}